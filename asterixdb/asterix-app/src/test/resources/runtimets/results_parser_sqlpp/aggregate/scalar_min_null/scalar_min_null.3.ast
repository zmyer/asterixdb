DataverseUse test
Query:
Let Variable [ Name=$i8 ]
  :=
  FunctionCall asterix.min@1[
    OrderedListConstructor [
      FunctionCall test.int8@1[
        LiteralExpr [STRING] [1]
      ]
      FunctionCall test.int8@1[
        LiteralExpr [STRING] [2]
      ]
      FunctionCall test.int8@1[
        LiteralExpr [STRING] [3]
      ]
      LiteralExpr [NULL]
    ]
  ]
Let Variable [ Name=$i16 ]
  :=
  FunctionCall asterix.min@1[
    OrderedListConstructor [
      FunctionCall test.int16@1[
        LiteralExpr [STRING] [1]
      ]
      FunctionCall test.int16@1[
        LiteralExpr [STRING] [2]
      ]
      FunctionCall test.int16@1[
        LiteralExpr [STRING] [3]
      ]
      LiteralExpr [NULL]
    ]
  ]
Let Variable [ Name=$i32 ]
  :=
  FunctionCall asterix.min@1[
    OrderedListConstructor [
      FunctionCall test.int32@1[
        LiteralExpr [STRING] [1]
      ]
      FunctionCall test.int32@1[
        LiteralExpr [STRING] [2]
      ]
      FunctionCall test.int32@1[
        LiteralExpr [STRING] [3]
      ]
      LiteralExpr [NULL]
    ]
  ]
Let Variable [ Name=$i64 ]
  :=
  FunctionCall asterix.min@1[
    OrderedListConstructor [
      FunctionCall test.int64@1[
        LiteralExpr [STRING] [1]
      ]
      FunctionCall test.int64@1[
        LiteralExpr [STRING] [2]
      ]
      FunctionCall test.int64@1[
        LiteralExpr [STRING] [3]
      ]
      LiteralExpr [NULL]
    ]
  ]
Let Variable [ Name=$f ]
  :=
  FunctionCall asterix.min@1[
    OrderedListConstructor [
      FunctionCall test.float@1[
        LiteralExpr [STRING] [1]
      ]
      FunctionCall test.float@1[
        LiteralExpr [STRING] [2]
      ]
      FunctionCall test.float@1[
        LiteralExpr [STRING] [3]
      ]
      LiteralExpr [NULL]
    ]
  ]
Let Variable [ Name=$d ]
  :=
  FunctionCall asterix.min@1[
    OrderedListConstructor [
      FunctionCall test.double@1[
        LiteralExpr [STRING] [1]
      ]
      FunctionCall test.double@1[
        LiteralExpr [STRING] [2]
      ]
      FunctionCall test.double@1[
        LiteralExpr [STRING] [3]
      ]
      LiteralExpr [NULL]
    ]
  ]
Let Variable [ Name=$s ]
  :=
  FunctionCall asterix.min@1[
    OrderedListConstructor [
      LiteralExpr [STRING] [foo]
      LiteralExpr [STRING] [bar]
      LiteralExpr [STRING] [world]
      LiteralExpr [NULL]
    ]
  ]
Let Variable [ Name=$dt ]
  :=
  FunctionCall asterix.min@1[
    OrderedListConstructor [
      FunctionCall test.datetime@1[
        LiteralExpr [STRING] [2012-03-01T00:00:00Z]
      ]
      FunctionCall test.datetime@1[
        LiteralExpr [STRING] [2012-01-01T00:00:00Z]
      ]
      FunctionCall test.datetime@1[
        LiteralExpr [STRING] [2012-02-01T00:00:00Z]
      ]
      LiteralExpr [NULL]
    ]
  ]
SELECT ELEMENT [
Variable [ Name=$i ]
]
FROM [  OrderedListConstructor [
    Variable [ Name=$i8 ]
    Variable [ Name=$i16 ]
    Variable [ Name=$i32 ]
    Variable [ Name=$i64 ]
    Variable [ Name=$f ]
    Variable [ Name=$d ]
    Variable [ Name=$s ]
    Variable [ Name=$dt ]
  ]
  AS Variable [ Name=$i ]
]
